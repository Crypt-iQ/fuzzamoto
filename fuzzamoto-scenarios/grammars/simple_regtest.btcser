# Transaction primitives

prevout { 
    u256, # prevout hash
    u32   # prevout index
}

script { vec<u8> }
tx_out { i64, script }
tx_in { prevout, script, u32 }

wit_stack { vec<vec<u8>> }

tx_no_wit { u32,vec<tx_in>,vec<tx_out>,u32 }

tx_allow_wit {
    u32,                   # version
    bytes<2>(0x0001),      # segwit marker (0 non-witness vins, flag = 1)
    vec<tx_in>,            # inputs
    vec<tx_out>,           # outputs
    slice<wit_stack, '2'>, # witness stack
    u32                    # locktime
}
tx_allow_wit { u32,bytes<2>(0x0000),u32 } # alternative with segwit marker 0x0000
tx_allow_wit { tx_no_wit }                # non-segwit fallback if there is no segwit marker

# Block primitives

header { 
    i32,  # version
    u256, # prev block hash
    u256, # merkle root
    u32,  # timestamp
    u32,  # bits
    u32,  # nonce
}

block { header, vec<tx_allow_wit> } # block with segwit transactions

shortid { bytes<6> }

cmpctblock {
  header,
  u64,              # nonce
  vec<shortid>,     # shortids
  vec<tx_allow_wit> # prefilled
}

blocktxn {
  u256, # blockhash
  vec<tx_allow_wit> # txs
}

blocktxn_as_vec { blocktxn }
cmpctblock_as_vec { cmpctblock }
tx_as_vec { tx_allow_wit }
block_as_vec { block }

p2p_msg { # tx
  bytes<12>(0x7478),
  tx_as_vec
}

p2p_msg { # block
  bytes<12>(0x626c6f636b),
  block_as_vec
}

p2p_msg { # cmpctblock
  bytes<12>(0x636d706374626c6f636b),
  cmpctblock_as_vec
}

p2p_msg { # blocktxn
  bytes<12>(0x626c6f636b74786e),
  blocktxn_as_vec
}

# Send message action
action {
  u8(0x00),
  u8,          # peer_id
  bool,        # force_ping
  p2p_msg
}

# Advance time action
action {
  u8(0x01), # tag for advance_time
  u64       # time to advance to
}

testcase { vec<action> }
